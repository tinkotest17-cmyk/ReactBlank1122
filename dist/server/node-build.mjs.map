{"version":3,"file":"node-build.mjs","sources":["../../server/database.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || process.env.VITE_SUPABASE_ANON_KEY || 'your-service-key';\n\nexport const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n// Database abstraction layer\nexport const db = {\n  async getAllUsers() {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Error fetching users from Supabase:', error);\n        // Fallback to localStorage for development\n        return JSON.parse(localStorage?.getItem('users') || '[]');\n      }\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  },\n\n  async updateUserStatus(userId: string, status: string) {\n    try {\n      const { error } = await supabase\n        .from('users')\n        .update({ status, updated_at: new Date() })\n        .eq('id', userId);\n      \n      if (error) {\n        console.error('Error updating user status in Supabase:', error);\n        return false;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      return false;\n    }\n  },\n\n  async getUserTransactions(userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('transactions')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Error fetching transactions from Supabase:', error);\n        return [];\n      }\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      return [];\n    }\n  },\n\n  async getPendingDepositsWithdrawals() {\n    try {\n      const { data, error } = await supabase\n        .from('deposits_withdrawals')\n        .select('*')\n        .eq('status', 'pending')\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Error fetching deposits/withdrawals from Supabase:', error);\n        return [];\n      }\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching deposits/withdrawals:', error);\n      return [];\n    }\n  },\n\n  async updateDepositWithdrawalStatus(id: string, status: string, processedBy?: string, rejectionReason?: string) {\n    try {\n      const updateData: any = {\n        status,\n        updated_at: new Date()\n      };\n      \n      if (processedBy) updateData.processed_by = processedBy;\n      if (rejectionReason) updateData.rejection_reason = rejectionReason;\n      if (status === 'approved' || status === 'rejected') updateData.processed_at = new Date();\n      \n      const { error } = await supabase\n        .from('deposits_withdrawals')\n        .update(updateData)\n        .eq('id', id);\n      \n      if (error) {\n        console.error('Error updating deposit/withdrawal status in Supabase:', error);\n        return false;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error updating deposit/withdrawal status:', error);\n      return false;\n    }\n  }\n};\n\n// Database connection test\nexport async function testConnection() {\n  try {\n    const { data, error } = await supabase\n      .from('users')\n      .select('count', { count: 'exact', head: true });\n    \n    if (error) {\n      console.log('⚠️ Supabase connection failed, using localStorage fallback');\n      return false;\n    }\n    \n    console.log('✅ Database connection established');\n    return true;\n  } catch (error) {\n    console.log('⚠️ Supabase connection failed, using localStorage fallback');\n    return false;\n  }\n}\n\n// Initialize database\nexport async function initializeDatabase() {\n  try {\n    await testConnection();\n    console.log('✅ Database connection initialized successfully');\n  } catch (error) {\n    console.log('⚠️ Database initialization failed, using localStorage fallback');\n  }\n}\n","\nimport express from 'express';\nimport cors from 'cors';\nimport { db, testConnection } from './database';\n\nexport function createServer() {\n  const app = express();\n  \n  // CORS configuration\n  app.use(cors({\n    origin: process.env.NODE_ENV === 'production' \n      ? ['https://your-production-domain.com'] \n      : ['http://localhost:8080', 'http://0.0.0.0:8080'],\n    credentials: true\n  }));\n  \n  app.use(express.json());\n  \n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'OK', timestamp: new Date().toISOString() });\n  });\n  \n  // Test database connection\n  app.get('/api/test-db', async (req, res) => {\n    try {\n      const isConnected = await testConnection();\n      res.json({ \n        connected: isConnected,\n        message: isConnected ? 'Database connection successful' : 'Database connection failed'\n      });\n    } catch (error) {\n      res.status(500).json({ \n        connected: false, \n        message: 'Database connection error',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n  \n  // Users endpoint\n  app.get('/api/users', async (req, res) => {\n    try {\n      const users = await db.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n  \n  // Update user status\n  app.put('/api/users/:id/status', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      const success = await db.updateUserStatus(id, status);\n      if (success) {\n        res.json({ message: 'User status updated successfully' });\n      } else {\n        res.status(500).json({ message: 'Failed to update user status' });\n      }\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      res.status(500).json({ message: 'Failed to update user status' });\n    }\n  });\n  \n  // Get user transactions\n  app.get('/api/users/:id/transactions', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const transactions = await db.getUserTransactions(id);\n      res.json(transactions);\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      res.status(500).json({ message: 'Failed to fetch transactions' });\n    }\n  });\n  \n  // Get pending deposits/withdrawals\n  app.get('/api/deposits-withdrawals/pending', async (req, res) => {\n    try {\n      const pending = await db.getPendingDepositsWithdrawals();\n      res.json(pending);\n    } catch (error) {\n      console.error('Error fetching pending deposits/withdrawals:', error);\n      res.status(500).json({ message: 'Failed to fetch pending deposits/withdrawals' });\n    }\n  });\n  \n  // Update deposit/withdrawal status\n  app.put('/api/deposits-withdrawals/:id/status', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, processedBy, rejectionReason } = req.body;\n      \n      const success = await db.updateDepositWithdrawalStatus(id, status, processedBy, rejectionReason);\n      if (success) {\n        res.json({ message: 'Deposit/withdrawal status updated successfully' });\n      } else {\n        res.status(500).json({ message: 'Failed to update deposit/withdrawal status' });\n      }\n    } catch (error) {\n      console.error('Error updating deposit/withdrawal status:', error);\n      res.status(500).json({ message: 'Failed to update deposit/withdrawal status' });\n    }\n  });\n  \n  return app;\n}\n\n// For direct server execution\nif (require.main === module) {\n  const app = createServer();\n  const port = process.env.PORT || 3001;\n  \n  app.listen(port, '0.0.0.0', () => {\n    console.log(`🚀 Server running on http://0.0.0.0:${port}`);\n  });\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 EdgeMarket server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express","port"],"mappings":"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"}